sql main thing
-- has different versions

demo email and pass: v@b vb



things to remember: 

-- autocomplete="off" -- put it in input
-- GET and POST only on web form method, action is where u say PUT/DELETE
--GET renders "ejs". Render takes ejs. GET always has renders
--RUD always takes redirect
--res.redirect sends you to new route(url) 
--ejs files don't take comments
--PK: ID that tracks in specific table. each user/song would have there own id
--Fk: ID that links with PK. Comments/users_songs would have FK
--these are relationships
      1:M -- User-comments
             songs-comments     
             user-songs
--creating models -- example with this project

sequelize model:create --name song  --attributes userId:integer, songName:string,artist:string,genre:genre,price:price,image:image


sequelize model:create --name comment --attributes userId:integer,comment:string,songId:integer

after sequelize db:migrate
-- join table
   sequelize model:create --name users_songs --attributes userId:integer,songId:integer

user model:
  // for 1:m -- hasMany is what we put on the 1. belongsTo to is for 'm' 
      models.user.belongsToMany(models.song, {through:'users_songs'})
      models.user.hasMany(models.comment)

song model:
      // join table
      // for 1:m -- hasMany is what we put on the 1. belongsTo is for 'm' 
      models.song.belongsToMany(models.user, {through:'users_songs'})
      models.song.hasMany(models.comment)

comment model:
  // for 1:m -- hasMany is what we put on the 1. belongsTo is for 'm' 
      // each comment belongs to a single user
      // each comment has a fk that references a pk 
      // this relationship says that each comment "belongs to" a single user. This means that each comment has a foreign key field that references the primary key of a user record, and this relationship is used to retrieve the user associated with a given comment.
      models.comment.belongsTo(models.song)
      models.comment.belongsTo(models.user)


      sequelize model:create --name song  --attributes userId:integer, songName:string,artist:string,genre:genre,price:price,image:image



resources:

font awesome



      


     



